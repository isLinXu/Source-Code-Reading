# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
######Jiayuan
tnc: 3  # number of classes
#######
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]  # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024]  # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768]   # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512]   # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512]   # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

scale: s

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, Conv, [512, 3, 2]]  # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]]  # 7-P5/32
  - [-1, 3, C2f, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]]  # 9

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat, [1]]  # cat backbone P4
  - [-1, 3, C2f, [512]]  # 12

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat, [1]]  # cat backbone P3
  - [-1, 3, C2f, [256]]  # 15 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 12], 1, Concat, [1]]  # cat head P4
  - [-1, 3, C2f, [512]]  # 18 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 9], 1, Concat, [1]]  # cat head P5
  - [-1, 3, C2f, [1024]]  # 21 (P5/32-large)


 # lane
  - [9, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat_dropout, [1]]  # cat backbone P4
  - [-1, 3, C2f, [512]]  # 24

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat_dropout, [1]]  # cat backbone P3
  - [-1, 3, C2f, [256]]  # 27 (P3/8-small)

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  #  for lane segmentation
  - [[-1, 2], 1, Concat_dropout, [1]]  #  cat backbone P2
  - [-1, 3, C2f, [128]]  # 30 (P2)
  
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']] #
  - [[-1, 0], 1, Concat_dropout, [1]]  #  cat backbone P1
  - [-1, 3, C2f, [64]]  # 33 (P1)
  
#  - [-1, 1, nn.Upsample, [None, 2, 'nearest']] #28
#  - [-1, 3, C2f, [32]]  # 29 (original)
  
  
 # drivable
  - [9, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat_dropout, [1]]  # cat backbone P4
  - [-1, 3, C2f, [512]]  # 36

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat_dropout, [1]]  # cat backbone P3
  - [-1, 3, C2f, [256]]  # 39 (P3/8-small)
 
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 30 for drivable segmentation
  - [[-1, 2], 1, Concat_dropout, [1]]
  - [-1, 3, C2f, [128]]  # 42 (P2)
  
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']] #
  - [[-1, 0], 1, Concat_dropout, [1]]
  - [-1, 3, C2f, [64]]  # 45 (P1)
  
#  - [-1, 1, nn.Upsample, [None, 2, 'nearest']] #34
#  - [-1, 3, C2f, [32]]  # 35 (original)
#
 
 
 
# tasks
  - [[15, 18, 21], 1, Detect, [1]]  # 36 Detect(P3, P4, P5)

  - [[45], 1, Segment, [1, 32, 256]]  # 37 drivable-Segment [1,32,256] was not working, you should change the head.py
  
  - [[33], 1, Segment, [1, 32, 256]]  # 38 lane-Segment [1,32,256] was not working, you should change the head.py

