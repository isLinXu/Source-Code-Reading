# Copyright (c) Facebook, Inc. and its affiliates.
import math
import fvcore.nn.weight_init as weight_init
import torch
import torch.nn.functional as F
from torch import nn

from detectron2.layers import Conv2d, ShapeSpec, get_norm

from .backbone import Backbone
from .build import BACKBONE_REGISTRY
from .resnet import build_resnet_backbone

__all__ = ["build_resnet_fpn_backbone", "build_retinanet_resnet_fpn_backbone", "FPN"]


class FPN(Backbone):
    """
    This module implements :paper:`FPN`.
    It creates pyramid features built on top of some input feature maps.
    该模块实现了特征金字塔网络(FPN)。它在输入的特征图基础上构建金字塔形式的特征层级。
    """

    _fuse_type: torch.jit.Final[str]  # 特征融合类型的类型注解

    def __init__(
        self, bottom_up, in_features, out_channels, norm="", top_block=None, fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
                自底向上的子网络模块，必须是Backbone的子类。由该网络生成的多尺度特征图
                （在in_features中列出）用于生成FPN的各个层级。

            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
                来自主干网络的输入特征图名称列表。例如，如果主干网络产生["res2", "res3", "res4"]，
                可以使用其中任意连续的子列表；顺序必须是从高分辨率到低分辨率。

            out_channels (int): number of channels in the output feature maps.
                输出特征图的通道数。

            norm (str): the normalization to use.
                使用的归一化方法。

            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
                如果提供，将在FPN最后一层（最小分辨率）的输出上执行额外的操作，
                结果将扩展到结果列表中。top_block进一步对特征图进行下采样。
                它必须具有属性"num_levels"（表示该模块添加的额外FPN层数）
                和"in_feature"（表示其输入特征，例如p5）。

            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
                融合自顶向下特征和横向连接特征的方式。可以是"sum"（默认值，逐元素相加）
                或"avg"（取两者的逐元素平均值）。
        """
        super(FPN, self).__init__()  # 调用父类的初始化方法
        assert isinstance(bottom_up, Backbone)  # 确保bottom_up是Backbone的实例
        assert in_features, in_features  # 确保in_features非空

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        # 从自底向上网络（如ResNet）获取特征图的步长和通道数
        input_shapes = bottom_up.output_shape()  # 获取输入特征图的形状信息
        strides = [input_shapes[f].stride for f in in_features]  # 获取每个特征层的步长
        in_channels_per_feature = [input_shapes[f].channels for f in in_features]  # 获取每个特征层的通道数

        _assert_strides_are_log2_contiguous(strides)  # 确保步长在log2尺度上是连续的
        lateral_convs = []  # 存储横向连接的卷积层
        output_convs = []  # 存储输出的卷积层

        use_bias = norm == ""  # 当不使用归一化时，使用偏置项
        for idx, in_channels in enumerate(in_channels_per_feature):
            lateral_norm = get_norm(norm, out_channels)  # 获取横向连接的归一化层
            output_norm = get_norm(norm, out_channels)  # 获取输出的归一化层

            # 创建1x1卷积用于横向连接，调整通道数
            lateral_conv = Conv2d(
                in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            # 创建3x3卷积用于特征融合后的处理
            output_conv = Conv2d(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            # 使用xavier方法初始化卷积层权重
            weight_init.c2_xavier_fill(lateral_conv)
            weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(strides[idx]))  # 计算当前特征层的阶段
            # 将卷积层添加到模块中
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)

            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        # 将卷积层按自顶向下的顺序排列（从低分辨率到高分辨率），使前向计算更清晰
        self.lateral_convs = lateral_convs[::-1]  # 反转横向连接卷积层列表
        self.output_convs = output_convs[::-1]  # 反转输出卷积层列表
        self.top_block = top_block  # 存储顶部额外处理模块
        self.in_features = tuple(in_features)  # 将输入特征名称转换为元组
        self.bottom_up = bottom_up  # 存储底层网络

        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        # 返回特征名称为"p<stage>"，如["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}  # 记录每个输出特征层的步长

        # top block output feature maps.
        # 处理顶部模块的输出特征图
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)  # 为额外的特征层设置步长

        self._out_features = list(self._out_feature_strides.keys())  # 输出特征层的名称列表
        self._out_feature_channels = {k: out_channels for k in self._out_features}  # 每个输出特征层的通道数
        self._size_divisibility = strides[-1]  # 设置输入图像需要被整除的数
        assert fuse_type in {"avg", "sum"}  # 确保融合类型是有效的
        self._fuse_type = fuse_type  # 设置特征融合方式

    @property
    def size_divisibility(self):
        # 返回输入图像需要被整除的数
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.
                输入特征图字典，将特征图名称（如"res5"）映射到对应的特征图张量，
                特征层级按从高分辨率到低分辨率排序。

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
                返回特征图字典，将特征图名称映射到FPN特征图张量，
                按从高分辨率到低分辨率排序。返回的特征名称遵循FPN论文约定：
                "p<stage>"，其中stage对应步长 = 2 ** stage，例如["p2", "p3", ..., "p6"]。
        """
        # 获取backbone网络的特征图
        bottom_up_features = self.bottom_up(x)
        results = []
        # 处理最深层的特征图
        prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        results.append(self.output_convs[0](prev_features))

        # Reverse feature maps into top-down order (from low to high resolution)
        # 自顶向下处理特征图（从低分辨率到高分辨率）
        for idx, (lateral_conv, output_conv) in enumerate(
            zip(self.lateral_convs, self.output_convs)
        ):
            # Slicing of ModuleList is not supported https://github.com/pytorch/pytorch/issues/47336
            # Therefore we loop over all modules but skip the first one
            # 由于ModuleList不支持切片，因此遍历所有模块但跳过第一个
            if idx > 0:
                # 获取当前层的特征图
                features = self.in_features[-idx - 1]
                features = bottom_up_features[features]
                # 对上一层特征图进行上采样
                top_down_features = F.interpolate(prev_features, scale_factor=2.0, mode="nearest")
                # 对当前层特征图进行横向连接处理
                lateral_features = lateral_conv(features)
                # 融合上采样特征和横向连接特征
                prev_features = lateral_features + top_down_features
                # 如果使用平均值融合方式，则除以2
                if self._fuse_type == "avg":
                    prev_features /= 2
                # 将处理后的特征图插入到结果列表的开头
                results.insert(0, output_conv(prev_features))

        # 如果存在top_block，处理额外的特征层
        if self.top_block is not None:
            # 确定top_block的输入特征
            if self.top_block.in_feature in bottom_up_features:
                # 如果输入特征来自backbone网络
                top_block_in_feature = bottom_up_features[self.top_block.in_feature]
            else:
                # 如果输入特征来自FPN的输出
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            # 将top_block的输出添加到结果列表中
            results.extend(self.top_block(top_block_in_feature))
        # 确保输出特征数量与预期相符
        assert len(self._out_features) == len(results)
        # 将特征名称与对应的特征图组合成字典返回
        return {f: res for f, res in zip(self._out_features, results)}

    def output_shape(self):
        # 返回每个输出特征层的形状信息（通道数和步长）
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    验证每个步长是其前一个步长的2倍，即在log2尺度上是连续的。
    """
    for i, stride in enumerate(strides[1:], 1):
        # 验证相邻步长之间的2倍关系
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(
            stride, strides[i - 1]
        )


class LastLevelMaxPool(nn.Module):
    """
    This module is used in the original FPN to generate a downsampled
    P6 feature from P5.
    该模块用于原始FPN中，用于从P5特征图生成下采样的P6特征图。
    """

    def __init__(self):
        # 初始化父类
        super().__init__()
        # 设置额外生成的特征层数量为1
        self.num_levels = 1
        # 设置输入特征为p5
        self.in_feature = "p5"

    def forward(self, x):
        # 对输入特征进行最大池化下采样
        return [F.max_pool2d(x, kernel_size=1, stride=2, padding=0)]


class LastLevelP6P7(nn.Module):
    """
    This module is used in RetinaNet to generate extra layers, P6 and P7 from
    C5 feature.
    该模块用于RetinaNet中，用于从C5特征生成额外的P6和P7层。
    """

    def __init__(self, in_channels, out_channels, in_feature="res5"):
        # 初始化父类
        super().__init__()
        # 设置额外生成的特征层数量为2（P6和P7）
        self.num_levels = 2
        # 设置输入特征（默认为res5）
        self.in_feature = in_feature
        # 创建P6卷积层，将C5特征图转换为P6特征图
        self.p6 = nn.Conv2d(in_channels, out_channels, 3, 2, 1)
        # 创建P7卷积层，将P6特征图转换为P7特征图
        self.p7 = nn.Conv2d(out_channels, out_channels, 3, 2, 1)
        # 使用xavier初始化方法初始化卷积层权重
        for module in [self.p6, self.p7]:
            weight_init.c2_xavier_fill(module)

    def forward(self, c5):
        # 生成P6特征图
        p6 = self.p6(c5)
        # 生成P7特征图（在P6的ReLU输出上进行卷积）
        p7 = self.p7(F.relu(p6))
        # 返回P6和P7特征图
        return [p6, p7]


@BACKBONE_REGISTRY.register()
def build_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode
        # 配置节点，包含了构建FPN所需的所有参数配置

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
        # 返回一个主干网络模块，必须是Backbone类的子类
    """
    # 构建ResNet主干网络，作为特征提取的基础网络
    bottom_up = build_resnet_backbone(cfg, input_shape)
    # 从配置中获取FPN的输入特征层名称列表
    in_features = cfg.MODEL.FPN.IN_FEATURES
    # 从配置中获取FPN的输出通道数
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    # 构建FPN网络
    backbone = FPN(
        bottom_up=bottom_up,  # 底层主干网络
        in_features=in_features,  # 输入特征层名称列表
        out_channels=out_channels,  # 输出通道数
        norm=cfg.MODEL.FPN.NORM,  # 归一化方法
        top_block=LastLevelMaxPool(),  # 顶层模块，使用最大池化生成额外的特征层
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,  # 特征融合方式
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode
        # 配置节点，包含了构建RetinaNet专用FPN所需的所有参数配置

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
        # 返回一个主干网络模块，必须是Backbone类的子类
    """
    # 构建ResNet主干网络，作为特征提取的基础网络
    bottom_up = build_resnet_backbone(cfg, input_shape)
    # 从配置中获取FPN的输入特征层名称列表
    in_features = cfg.MODEL.FPN.IN_FEATURES
    # 从配置中获取FPN的输出通道数
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    # 获取res5层的通道数，用于构建P6和P7层
    in_channels_p6p7 = bottom_up.output_shape()["res5"].channels
    # 构建FPN网络
    backbone = FPN(
        bottom_up=bottom_up,  # 底层主干网络
        in_features=in_features,  # 输入特征层名称列表
        out_channels=out_channels,  # 输出通道数
        norm=cfg.MODEL.FPN.NORM,  # 归一化方法
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels),  # 顶层模块，使用卷积生成P6和P7特征层
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,  # 特征融合方式
    )
    return backbone
