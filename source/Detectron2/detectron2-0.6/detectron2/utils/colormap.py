# Copyright (c) Facebook, Inc. and its affiliates.

"""
An awesome colormap for really neat visualizations.
Copied from Detectron, and removed gray colors.

一个用于精美可视化的优秀颜色映射。
从Detectron复制而来，并移除了灰色。
"""

import numpy as np  # 导入numpy库，用于数值计算

__all__ = ["colormap", "random_color"]  # 指定模块公开的函数列表

# fmt: off
# RGB:
_COLORS = np.array(  # 定义RGB颜色数组
    [
        0.000, 0.447, 0.741,  # 蓝色
        0.850, 0.325, 0.098,  # 红褐色
        0.929, 0.694, 0.125,  # 黄色
        0.494, 0.184, 0.556,  # 紫色
        0.466, 0.674, 0.188,  # 绿色
        0.301, 0.745, 0.933,  # 浅蓝色
        0.635, 0.078, 0.184,  # 暗红色
        0.300, 0.300, 0.300,  # 深灰色
        0.600, 0.600, 0.600,  # 中灰色
        1.000, 0.000, 0.000,  # 纯红色
        1.000, 0.500, 0.000,  # 橙色
        0.749, 0.749, 0.000,  # 橄榄色
        0.000, 1.000, 0.000,  # 纯绿色
        0.000, 0.000, 1.000,  # 纯蓝色
        0.667, 0.000, 1.000,  # 紫红色
        0.333, 0.333, 0.000,  # 暗橄榄色
        0.333, 0.667, 0.000,  # 暗黄绿色
        0.333, 1.000, 0.000,  # 亮黄绿色
        0.667, 0.333, 0.000,  # 棕色
        0.667, 0.667, 0.000,  # 深黄色
        0.667, 1.000, 0.000,  # 亮黄色
        1.000, 0.333, 0.000,  # 红橙色
        1.000, 0.667, 0.000,  # 橙黄色
        1.000, 1.000, 0.000,  # 纯黄色
        0.000, 0.333, 0.500,  # 深青色
        0.000, 0.667, 0.500,  # 中青色
        0.000, 1.000, 0.500,  # 浅青色
        0.333, 0.000, 0.500,  # 深紫色
        0.333, 0.333, 0.500,  # 灰紫色
        0.333, 0.667, 0.500,  # 灰青色
        0.333, 1.000, 0.500,  # 亮青色
        0.667, 0.000, 0.500,  # 深洋红色
        0.667, 0.333, 0.500,  # 紫红色
        0.667, 0.667, 0.500,  # 浅橄榄色
        0.667, 1.000, 0.500,  # 黄绿色
        1.000, 0.000, 0.500,  # 亮洋红色
        1.000, 0.333, 0.500,  # 粉红色
        1.000, 0.667, 0.500,  # 浅橙色
        1.000, 1.000, 0.500,  # 浅黄色
        0.000, 0.333, 1.000,  # 蓝紫色
        0.000, 0.667, 1.000,  # 天蓝色
        0.000, 1.000, 1.000,  # 青色
        0.333, 0.000, 1.000,  # 紫色
        0.333, 0.333, 1.000,  # 蓝紫色
        0.333, 0.667, 1.000,  # 亮蓝色
        0.333, 1.000, 1.000,  # 亮青色
        0.667, 0.000, 1.000,  # 洋红色
        0.667, 0.333, 1.000,  # 亮紫色
        0.667, 0.667, 1.000,  # 淡蓝色
        0.667, 1.000, 1.000,  # 淡青色
        1.000, 0.000, 1.000,  # 洋红色
        1.000, 0.333, 1.000,  # 粉紫色
        1.000, 0.667, 1.000,  # 淡粉色
        0.333, 0.000, 0.000,  # 暗红色
        0.500, 0.000, 0.000,  # 栗色
        0.667, 0.000, 0.000,  # 深红色
        0.833, 0.000, 0.000,  # 红色
        1.000, 0.000, 0.000,  # 纯红色
        0.000, 0.167, 0.000,  # 深绿色
        0.000, 0.333, 0.000,  # 暗绿色
        0.000, 0.500, 0.000,  # 深绿色
        0.000, 0.667, 0.000,  # 绿色
        0.000, 0.833, 0.000,  # 亮绿色
        0.000, 1.000, 0.000,  # 纯绿色
        0.000, 0.000, 0.167,  # 深蓝色
        0.000, 0.000, 0.333,  # 暗蓝色
        0.000, 0.000, 0.500,  # 深蓝色
        0.000, 0.000, 0.667,  # 蓝色
        0.000, 0.000, 0.833,  # 亮蓝色
        0.000, 0.000, 1.000,  # 纯蓝色
        0.000, 0.000, 0.000,  # 黑色
        0.143, 0.143, 0.143,  # 暗灰色
        0.857, 0.857, 0.857,  # 浅灰色
        1.000, 1.000, 1.000   # 白色
    ]
).astype(np.float32).reshape(-1, 3)  # 将颜色列表转换为float32类型并重塑为Nx3数组
# fmt: on


def colormap(rgb=False, maximum=255):
    """
    Args:
        rgb (bool): whether to return RGB colors or BGR colors.
        maximum (int): either 255 or 1

    Returns:
        ndarray: a float32 array of Nx3 colors, in range [0, 255] or [0, 1]
        
    参数:
        rgb (bool): 是否返回RGB颜色或BGR颜色。
        maximum (int): 255或1

    返回:
        ndarray: 一个Nx3形状的float32数组，范围为[0, 255]或[0, 1]
    """
    assert maximum in [255, 1], maximum  # 确保maximum参数只能是255或1
    c = _COLORS * maximum  # 将颜色值缩放到指定范围
    if not rgb:
        c = c[:, ::-1]  # 如果不是rgb，则将RGB转换为BGR
    return c  # 返回颜色映射数组


def random_color(rgb=False, maximum=255):
    """
    Args:
        rgb (bool): whether to return RGB colors or BGR colors.
        maximum (int): either 255 or 1

    Returns:
        ndarray: a vector of 3 numbers
        
    参数:
        rgb (bool): 是否返回RGB颜色或BGR颜色。
        maximum (int): 255或1

    返回:
        ndarray: 一个包含3个数的向量
    """
    idx = np.random.randint(0, len(_COLORS))  # 随机选择一个颜色索引
    ret = _COLORS[idx] * maximum  # 获取对应颜色并缩放到指定范围
    if not rgb:
        ret = ret[::-1]  # 如果不是rgb，则将RGB转换为BGR
    return ret  # 返回随机颜色


if __name__ == "__main__":
    import cv2  # 导入OpenCV库

    size = 100  # 定义每个颜色块的大小
    H, W = 10, 10  # 定义画布的行数和列数
    canvas = np.random.rand(H * size, W * size, 3).astype("float32")  # 创建一个随机初始化的画布
    for h in range(H):  # 遍历每一行
        for w in range(W):  # 遍历每一列
            idx = h * W + w  # 计算颜色索引
            if idx >= len(_COLORS):  # 如果索引超出颜色数组范围
                break  # 跳出循环
            canvas[h * size : (h + 1) * size, w * size : (w + 1) * size] = _COLORS[idx]  # 在画布上绘制颜色块
    cv2.imshow("a", canvas)  # 显示画布
    cv2.waitKey(0)  # 等待按键
